// Generated from Datalog.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,43,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,
2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,
9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,
1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,
17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,
1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,
29,1,29,4,29,199,8,29,11,29,12,29,200,1,30,1,30,1,30,1,30,5,30,207,8,30,
10,30,12,30,210,9,30,1,30,1,30,1,31,3,31,215,8,31,1,31,4,31,218,8,31,11,
31,12,31,219,1,32,1,32,1,32,1,32,1,32,1,32,4,32,228,8,32,11,32,12,32,229,
1,33,1,33,4,33,234,8,33,11,33,12,33,235,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,3,34,247,8,34,1,35,5,35,250,8,35,10,35,12,35,253,9,35,1,35,
1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,277,8,35,1,36,1,36,3,36,281,8,36,1,
36,5,36,284,8,36,10,36,12,36,287,9,36,1,37,1,37,4,37,291,8,37,11,37,12,37,
292,1,38,1,38,1,38,1,38,5,38,299,8,38,10,38,12,38,302,9,38,1,38,1,38,1,39,
1,39,1,39,1,40,1,40,1,40,1,41,1,41,5,41,314,8,41,10,41,12,41,317,9,41,1,
41,1,41,1,41,1,41,1,42,1,42,1,43,4,43,326,8,43,11,43,12,43,327,1,43,1,43,
2,208,315,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
73,37,75,38,77,39,79,40,81,41,83,42,85,0,87,43,1,0,8,4,0,48,58,65,90,95,
95,97,122,1,0,48,57,2,0,48,57,97,102,2,0,43,43,45,45,2,0,65,90,97,122,4,
0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,133,133,8232,8233,3,0,9,10,13,
13,32,32,344,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,
98,1,0,0,0,5,100,1,0,0,0,7,110,1,0,0,0,9,119,1,0,0,0,11,127,1,0,0,0,13,129,
1,0,0,0,15,131,1,0,0,0,17,133,1,0,0,0,19,136,1,0,0,0,21,142,1,0,0,0,23,145,
1,0,0,0,25,149,1,0,0,0,27,152,1,0,0,0,29,158,1,0,0,0,31,163,1,0,0,0,33,165,
1,0,0,0,35,167,1,0,0,0,37,169,1,0,0,0,39,171,1,0,0,0,41,173,1,0,0,0,43,176,
1,0,0,0,45,179,1,0,0,0,47,182,1,0,0,0,49,185,1,0,0,0,51,187,1,0,0,0,53,189,
1,0,0,0,55,192,1,0,0,0,57,194,1,0,0,0,59,196,1,0,0,0,61,202,1,0,0,0,63,214,
1,0,0,0,65,221,1,0,0,0,67,231,1,0,0,0,69,246,1,0,0,0,71,251,1,0,0,0,73,278,
1,0,0,0,75,288,1,0,0,0,77,294,1,0,0,0,79,305,1,0,0,0,81,308,1,0,0,0,83,311,
1,0,0,0,85,322,1,0,0,0,87,325,1,0,0,0,89,90,5,116,0,0,90,91,5,114,0,0,91,
92,5,117,0,0,92,93,5,115,0,0,93,94,5,116,0,0,94,95,5,105,0,0,95,96,5,110,
0,0,96,97,5,103,0,0,97,2,1,0,0,0,98,99,5,44,0,0,99,4,1,0,0,0,100,101,5,97,
0,0,101,102,5,117,0,0,102,103,5,116,0,0,103,104,5,104,0,0,104,105,5,111,
0,0,105,106,5,114,0,0,106,107,5,105,0,0,107,108,5,116,0,0,108,109,5,121,
0,0,109,6,1,0,0,0,110,111,5,112,0,0,111,112,5,114,0,0,112,113,5,101,0,0,
113,114,5,118,0,0,114,115,5,105,0,0,115,116,5,111,0,0,116,117,5,117,0,0,
117,118,5,115,0,0,118,8,1,0,0,0,119,120,5,101,0,0,120,121,5,100,0,0,121,
122,5,50,0,0,122,123,5,53,0,0,123,124,5,53,0,0,124,125,5,49,0,0,125,126,
5,57,0,0,126,10,1,0,0,0,127,128,5,59,0,0,128,12,1,0,0,0,129,130,5,40,0,0,
130,14,1,0,0,0,131,132,5,41,0,0,132,16,1,0,0,0,133,134,5,60,0,0,134,135,
5,45,0,0,135,18,1,0,0,0,136,137,5,99,0,0,137,138,5,104,0,0,138,139,5,101,
0,0,139,140,5,99,0,0,140,141,5,107,0,0,141,20,1,0,0,0,142,143,5,105,0,0,
143,144,5,102,0,0,144,22,1,0,0,0,145,146,5,97,0,0,146,147,5,108,0,0,147,
148,5,108,0,0,148,24,1,0,0,0,149,150,5,111,0,0,150,151,5,114,0,0,151,26,
1,0,0,0,152,153,5,97,0,0,153,154,5,108,0,0,154,155,5,108,0,0,155,156,5,111,
0,0,156,157,5,119,0,0,157,28,1,0,0,0,158,159,5,100,0,0,159,160,5,101,0,0,
160,161,5,110,0,0,161,162,5,121,0,0,162,30,1,0,0,0,163,164,5,33,0,0,164,
32,1,0,0,0,165,166,5,42,0,0,166,34,1,0,0,0,167,168,5,47,0,0,168,36,1,0,0,
0,169,170,5,43,0,0,170,38,1,0,0,0,171,172,5,45,0,0,172,40,1,0,0,0,173,174,
5,124,0,0,174,175,5,124,0,0,175,42,1,0,0,0,176,177,5,38,0,0,177,178,5,38,
0,0,178,44,1,0,0,0,179,180,5,62,0,0,180,181,5,61,0,0,181,46,1,0,0,0,182,
183,5,60,0,0,183,184,5,61,0,0,184,48,1,0,0,0,185,186,5,62,0,0,186,50,1,0,
0,0,187,188,5,60,0,0,188,52,1,0,0,0,189,190,5,61,0,0,190,191,5,61,0,0,191,
54,1,0,0,0,192,193,5,91,0,0,193,56,1,0,0,0,194,195,5,93,0,0,195,58,1,0,0,
0,196,198,5,36,0,0,197,199,7,0,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,
1,0,0,0,200,201,1,0,0,0,201,60,1,0,0,0,202,208,5,34,0,0,203,204,5,92,0,0,
204,207,5,34,0,0,205,207,9,0,0,0,206,203,1,0,0,0,206,205,1,0,0,0,207,210,
1,0,0,0,208,209,1,0,0,0,208,206,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,
211,212,5,34,0,0,212,62,1,0,0,0,213,215,5,45,0,0,214,213,1,0,0,0,214,215,
1,0,0,0,215,217,1,0,0,0,216,218,7,1,0,0,217,216,1,0,0,0,218,219,1,0,0,0,
219,217,1,0,0,0,219,220,1,0,0,0,220,64,1,0,0,0,221,222,5,104,0,0,222,223,
5,101,0,0,223,224,5,120,0,0,224,225,5,58,0,0,225,227,1,0,0,0,226,228,7,2,
0,0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,
66,1,0,0,0,231,233,5,47,0,0,232,234,7,2,0,0,233,232,1,0,0,0,234,235,1,0,
0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,68,1,0,0,0,237,238,5,116,0,0,238,
239,5,114,0,0,239,240,5,117,0,0,240,247,5,101,0,0,241,242,5,102,0,0,242,
243,5,97,0,0,243,244,5,108,0,0,244,245,5,115,0,0,245,247,5,101,0,0,246,237,
1,0,0,0,246,241,1,0,0,0,247,70,1,0,0,0,248,250,7,1,0,0,249,248,1,0,0,0,250,
253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,
0,0,254,255,5,45,0,0,255,256,7,1,0,0,256,257,7,1,0,0,257,258,5,45,0,0,258,
259,7,1,0,0,259,260,7,1,0,0,260,261,5,84,0,0,261,262,7,1,0,0,262,263,7,1,
0,0,263,264,5,58,0,0,264,265,7,1,0,0,265,266,7,1,0,0,266,267,5,58,0,0,267,
268,7,1,0,0,268,276,7,1,0,0,269,277,5,90,0,0,270,271,7,3,0,0,271,272,7,1,
0,0,272,273,7,1,0,0,273,274,5,58,0,0,274,275,7,1,0,0,275,277,7,1,0,0,276,
269,1,0,0,0,276,270,1,0,0,0,277,72,1,0,0,0,278,280,5,46,0,0,279,281,7,4,
0,0,280,279,1,0,0,0,281,285,1,0,0,0,282,284,7,5,0,0,283,282,1,0,0,0,284,
287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,74,1,0,0,0,287,285,1,0,0,
0,288,290,7,4,0,0,289,291,7,0,0,0,290,289,1,0,0,0,291,292,1,0,0,0,292,290,
1,0,0,0,292,293,1,0,0,0,293,76,1,0,0,0,294,295,5,47,0,0,295,296,5,47,0,0,
296,300,1,0,0,0,297,299,3,85,42,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,
1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,304,6,38,0,0,
304,78,1,0,0,0,305,306,5,47,0,0,306,307,5,42,0,0,307,80,1,0,0,0,308,309,
5,42,0,0,309,310,5,47,0,0,310,82,1,0,0,0,311,315,3,79,39,0,312,314,9,0,0,
0,313,312,1,0,0,0,314,317,1,0,0,0,315,316,1,0,0,0,315,313,1,0,0,0,316,318,
1,0,0,0,317,315,1,0,0,0,318,319,3,81,40,0,319,320,1,0,0,0,320,321,6,41,0,
0,321,84,1,0,0,0,322,323,8,6,0,0,323,86,1,0,0,0,324,326,7,7,0,0,325,324,
1,0,0,0,326,327,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,
329,330,6,43,0,0,330,88,1,0,0,0,20,0,200,206,208,214,219,227,229,233,235,
246,251,276,280,283,285,292,300,315,327,1,0,2,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class DatalogLexer extends antlr4.Lexer {

    static grammarFileName = "Datalog.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'trusting'", "','", "'authority'", "'previous'", 
                         "'ed25519'", "';'", "'('", "')'", "'<-'", "'check'", 
                         "'if'", "'all'", "'or'", "'allow'", "'deny'", "'!'", 
                         "'*'", "'/'", "'+'", "'-'", "'||'", "'&&'", "'>='", 
                         "'<='", "'>'", "'<'", "'=='", "'['", "']'", null, 
                         null, null, null, null, null, null, null, null, 
                         null, "'/*'", "'*/'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "VARIABLE", 
                          "STRING", "NUMBER", "BYTES", "PUBLICKEYBYTES", 
                          "BOOLEAN", "DATE", "METHOD_INVOCATION", "NAME", 
                          "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT_START", 
                          "DELIMITED_COMMENT_END", "DELIMITED_COMMENT", 
                          "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "VARIABLE", "STRING", 
                      "NUMBER", "BYTES", "PUBLICKEYBYTES", "BOOLEAN", "DATE", 
                      "METHOD_INVOCATION", "NAME", "SINGLE_LINE_COMMENT", 
                      "DELIMITED_COMMENT_START", "DELIMITED_COMMENT_END", 
                      "DELIMITED_COMMENT", "InputCharacter", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

DatalogLexer.EOF = antlr4.Token.EOF;
DatalogLexer.T__0 = 1;
DatalogLexer.T__1 = 2;
DatalogLexer.T__2 = 3;
DatalogLexer.T__3 = 4;
DatalogLexer.T__4 = 5;
DatalogLexer.T__5 = 6;
DatalogLexer.T__6 = 7;
DatalogLexer.T__7 = 8;
DatalogLexer.T__8 = 9;
DatalogLexer.T__9 = 10;
DatalogLexer.T__10 = 11;
DatalogLexer.T__11 = 12;
DatalogLexer.T__12 = 13;
DatalogLexer.T__13 = 14;
DatalogLexer.T__14 = 15;
DatalogLexer.T__15 = 16;
DatalogLexer.T__16 = 17;
DatalogLexer.T__17 = 18;
DatalogLexer.T__18 = 19;
DatalogLexer.T__19 = 20;
DatalogLexer.T__20 = 21;
DatalogLexer.T__21 = 22;
DatalogLexer.T__22 = 23;
DatalogLexer.T__23 = 24;
DatalogLexer.T__24 = 25;
DatalogLexer.T__25 = 26;
DatalogLexer.T__26 = 27;
DatalogLexer.T__27 = 28;
DatalogLexer.T__28 = 29;
DatalogLexer.VARIABLE = 30;
DatalogLexer.STRING = 31;
DatalogLexer.NUMBER = 32;
DatalogLexer.BYTES = 33;
DatalogLexer.PUBLICKEYBYTES = 34;
DatalogLexer.BOOLEAN = 35;
DatalogLexer.DATE = 36;
DatalogLexer.METHOD_INVOCATION = 37;
DatalogLexer.NAME = 38;
DatalogLexer.SINGLE_LINE_COMMENT = 39;
DatalogLexer.DELIMITED_COMMENT_START = 40;
DatalogLexer.DELIMITED_COMMENT_END = 41;
DatalogLexer.DELIMITED_COMMENT = 42;
DatalogLexer.WS = 43;



